1) Sean O'Donnell
2) 6 hours
3) Making linked lists is always entertaining. I feel like every time I make them I do something differently
    (how I traverse it, what variables I use for sorted insert, etc.)
4)
    I did not have to use gdb to find a bug, but I did use it to determine that the pointers I was retaining were correct, and      that when a book was removed from the list, the hex-address for that Node matched the one returned by malloc for that book.
    To do this, I set breakpoints at addBook.c:addBook(), removeBook.c:removeNode(), parser.c:readOneNode() and lab3main.c:freeBooks(). (Any function in which malloc/free is called).
    When the program began, gdb stopped at the first (non-declaration) line of readOneNode. I stepped past the call to readOneBook() until I reached the call to malloc(). After the malloc call, I took note of the hex-address of the pointer returned. I repeated this 3 times, then let the program continue.
    Once the program prompted me for an option, I chose '9' (add a new book), and gdb stopped the program at the first line of addBook. I entered 'next' and it prompted me to input the book's information; I did (stock number 3000) and gdb stopped at the malloc call which allocates space for the new book. I took note of the hex-address returned bhy malloc and continued the program.
    When prompted again, I chose '10' (delete a book), and entered the stock number 3000 for the book I just added. gdb then stopped the program at the first line of removeNode. I entered 'next' until the cursor pointer was pointing to the book with stock number 3000. I ensured that the hex-address of cursor was the same that malloc returned when I added the same book, and it was (0x604450, to be unnecessarily exact). The cursor pointer then was passed to free() and the space memory was deallocated properly.
    When prompted again I chose '11' to end the program and free the nodes in the list. gdb stopped the program at the first line of freeBooks. I entered 'next' and read the cursor's hex-address as the cursor travered the list, freeing the space allocated for each pointer. I made sure that I saw all 3 of the hex-addresses I took down from the malloc calls when the program read in the books from the input file and allocated space for each node. I saw all three hex-addresses I took down and each of them was passed to free() to have its memory deallocated.
